name: "publish"

on:
  push:
    branches:
      - release

# This is the example from the readme.
# On each push to the `release` branch it will create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            llvm \
            llvm-dev \
            libclang-dev \
            clang \
            libopencv-dev \
            python3-opencv \
            pkg-config
          # Set PKG_CONFIG_PATH for OpenCV
          echo "PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/local/lib/pkgconfig" >> $GITHUB_ENV
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.
      - name: install MacOS dependencies (M1 and above)
        if: matrix.platform == 'macos-latest'
        run: |
          brew install opencv llvm

      - name: Set clang environment on macOS
        if: matrix.platform == 'macos-latest'
        run: |
          echo "LIBCLANG_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV
      # Windows dependencies
      - name: Install Windows dependencies
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          # 1. Install LLVM and a known version of OpenCV
          choco install llvm -y
          choco install opencv --version=4.11.0 -y
          
          # 2. Make sure we know which numeric suffix the library has
          #    For OpenCV 4.1.1, itâ€™s typically "411", so:
          $env:OPENCV_VERSION = "4110"

          # 3. Set library, include, and linking environment variables
          #    opencv_world411.lib/dll should exist under C:\tools\opencv\build\x64\vc16\{lib, bin}
          echo "OPENCV_LINK_LIBS=opencv_world$($env:OPENCV_VERSION)" >> $env:GITHUB_ENV
          echo "OPENCV_LINK_PATHS=C:\tools\opencv\build\x64\vc16\lib" >> $env:GITHUB_ENV
          echo "OPENCV_INCLUDE_PATHS=C:\tools\opencv\build\include" >> $env:GITHUB_ENV
          
          # 4. (Optional) If the crate needs clang (e.g., for BINDING_GENERATOR=clang),
          #    set LIBCLANG_PATH. Usually installed under Program Files\LLVM\bin.
          $clangPath = (Get-Command clang).Source | Split-Path
          echo "LIBCLANG_PATH=$clangPath" >> $env:GITHUB_ENV
          
          # 5. Add the OpenCV \bin folder to PATH
          echo "C:\tools\opencv\build\x64\vc16\bin" >> $env:GITHUB_PATH      
          
      - name: install frontend dependencies
        run: npm install # change this to npm, pnpm or bun depending on which one you use.

      # Add Rust caching with Windows-specific configuration
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "src-tauri"
          cache-on-failure: true
          # Only cache dependencies, not the entire project
          cache-all-crates: true
          # Create separate caches for each OS and target architecture
          shared-key: "${{ runner.os }}-${{ matrix.args }}"
          # Track only the essential environment variables
          env-vars: |
            CARGO
            RUST
            OPENCV_VERSION
            OPENCV_MSVC_BUILD
      
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

